// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package multihook

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Hook struct {
	pulumi.ResourceState

	// The hook URL.
	ReadonlyUrl pulumi.StringPtrOutput `pulumi:"readonlyUrl"`
}

// NewHook registers a new resource with the given unique name, arguments, and options.
func NewHook(ctx *pulumi.Context,
	name string, args *HookArgs, opts ...pulumi.ResourceOption) (*Hook, error) {
	if args == nil {
		args = &HookArgs{}
	}

	var resource Hook
	err := ctx.RegisterRemoteComponentResource("multihook:index:Hook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type hookArgs struct {
}

// The set of arguments for constructing a Hook resource.
type HookArgs struct {
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookArgs)(nil)).Elem()
}

type HookInput interface {
	pulumi.Input

	ToHookOutput() HookOutput
	ToHookOutputWithContext(ctx context.Context) HookOutput
}

func (*Hook) ElementType() reflect.Type {
	return reflect.TypeOf((*Hook)(nil))
}

func (i *Hook) ToHookOutput() HookOutput {
	return i.ToHookOutputWithContext(context.Background())
}

func (i *Hook) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput)
}

func (i *Hook) ToHookPtrOutput() HookPtrOutput {
	return i.ToHookPtrOutputWithContext(context.Background())
}

func (i *Hook) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookPtrOutput)
}

type HookPtrInput interface {
	pulumi.Input

	ToHookPtrOutput() HookPtrOutput
	ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput
}

type hookPtrType HookArgs

func (*hookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil))
}

func (i *hookPtrType) ToHookPtrOutput() HookPtrOutput {
	return i.ToHookPtrOutputWithContext(context.Background())
}

func (i *hookPtrType) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookPtrOutput)
}

// HookArrayInput is an input type that accepts HookArray and HookArrayOutput values.
// You can construct a concrete instance of `HookArrayInput` via:
//
//          HookArray{ HookArgs{...} }
type HookArrayInput interface {
	pulumi.Input

	ToHookArrayOutput() HookArrayOutput
	ToHookArrayOutputWithContext(context.Context) HookArrayOutput
}

type HookArray []HookInput

func (HookArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Hook)(nil))
}

func (i HookArray) ToHookArrayOutput() HookArrayOutput {
	return i.ToHookArrayOutputWithContext(context.Background())
}

func (i HookArray) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookArrayOutput)
}

// HookMapInput is an input type that accepts HookMap and HookMapOutput values.
// You can construct a concrete instance of `HookMapInput` via:
//
//          HookMap{ "key": HookArgs{...} }
type HookMapInput interface {
	pulumi.Input

	ToHookMapOutput() HookMapOutput
	ToHookMapOutputWithContext(context.Context) HookMapOutput
}

type HookMap map[string]HookInput

func (HookMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Hook)(nil))
}

func (i HookMap) ToHookMapOutput() HookMapOutput {
	return i.ToHookMapOutputWithContext(context.Background())
}

func (i HookMap) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookMapOutput)
}

type HookOutput struct {
	*pulumi.OutputState
}

func (HookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hook)(nil))
}

func (o HookOutput) ToHookOutput() HookOutput {
	return o
}

func (o HookOutput) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return o
}

func (o HookOutput) ToHookPtrOutput() HookPtrOutput {
	return o.ToHookPtrOutputWithContext(context.Background())
}

func (o HookOutput) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return o.ApplyT(func(v Hook) *Hook {
		return &v
	}).(HookPtrOutput)
}

type HookPtrOutput struct {
	*pulumi.OutputState
}

func (HookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil))
}

func (o HookPtrOutput) ToHookPtrOutput() HookPtrOutput {
	return o
}

func (o HookPtrOutput) ToHookPtrOutputWithContext(ctx context.Context) HookPtrOutput {
	return o
}

type HookArrayOutput struct{ *pulumi.OutputState }

func (HookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hook)(nil))
}

func (o HookArrayOutput) ToHookArrayOutput() HookArrayOutput {
	return o
}

func (o HookArrayOutput) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return o
}

func (o HookArrayOutput) Index(i pulumi.IntInput) HookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hook {
		return vs[0].([]Hook)[vs[1].(int)]
	}).(HookOutput)
}

type HookMapOutput struct{ *pulumi.OutputState }

func (HookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Hook)(nil))
}

func (o HookMapOutput) ToHookMapOutput() HookMapOutput {
	return o
}

func (o HookMapOutput) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return o
}

func (o HookMapOutput) MapIndex(k pulumi.StringInput) HookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Hook {
		return vs[0].(map[string]Hook)[vs[1].(string)]
	}).(HookOutput)
}

func init() {
	pulumi.RegisterOutputType(HookOutput{})
	pulumi.RegisterOutputType(HookPtrOutput{})
	pulumi.RegisterOutputType(HookArrayOutput{})
	pulumi.RegisterOutputType(HookMapOutput{})
}
